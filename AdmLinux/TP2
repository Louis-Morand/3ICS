### Louis MORAND

# **Administration système** 

# TP2 - BASH

## Ex 1- Variables d'environnement

1-Les commandes tapées par l'utilisateur sont situés dans le dossier ~/.bash_history.

2-La variable d'environnement "HOME", accessible via la commande "env", est la variable d'environnement qui permet à la commande cd passée sans arguments de ramener dans le répertoire personnel.

3-la variable LANG permet de préciser la langue d'affichage du caractères du shell, PWD spécifie le dossier courant, OLDPWD permet de préciser le répertoire précédent dans lequel était l'utilisateur, et SHELL permet de spécifier le shell courant de l'utilisateur.

4- Après création via "My_VAR=XXXX", la variable existe mais n'est pas listée dans env.

5-la commande "Bash" ouvre un autre terminal de commande bash, dans laquelle la commande "MY_VAR" n'existe pas, car elle n'a pas été ajoutée aux variables d'environnement, elle est locale à l'instance bash crée.

6-Suite à l'ajout de la variable "MY_VAR" dans le fichier bashrc, la commande est intégrée dans l'environnement shell de l'utilisateur, et est donc accessible dans les différents shell instanciés.

7-Dans le fichier ~/.bashrc, on rajoute "NOMS= "Louis_Benoit" pour permettre de créer une variable utilisable.

8-On peux afficher une chaine en utilisant cette variable vie "echo bonjour $NOMS".

9-La commande "unset" permet de supprimer l'affectation d'une variable et de permettre sa réutilisation, tandis qu'une variable vide va utiliser le nom de la variable, mais ne va avoir aucun effet particulier en dehors des comportements relatifs à une variable.

10-La commande "echo '$HOME' = $HOME" permet d'afficher "$HOME = /home/louis".

## Ex2- Contrôle de mot de passe

>#!/bin/bash
>
>mdpF='123+aze'#!/bin/bash
>
>mdpF='123+aze'
>
>read -s -p 'Saisir un mot de passe: ' mdpU
>
>       if [ $mdpU = $mdpF ]; then
>              echo "Mots de passe ok"
>              else
>       echo "Mot de passe incorrect"
>       fi
>testpwd.sh (END)


## Ex3- Expressions rationnelles

>#!/bin/bash
>
>function is_number(){
>
>re='^[+-]?[0-9]+([.][0-9]+)?$'
>
> if ! [[ $1 =~ $re ]]; then
>
>return 1
>
>else
>
>return 0
>
>fi
>
>}
>
>read -p "rentrez un paramètre: " nb
>
>is_number $nb
>
>       if [ $? -eq 0 ];then
>               echo "nombre réel"
>       else
>              echo "Erreur: Nombre non réel"
>       fi
>testreel.sh (END)

## Ex4- Contrôle d’utilisateur

>#!/bin/bash
>
>nomFichier=$(basename $0)
>
>       if [ -z "$1" ]; then
>               echo "Utilisation: $nomFichier nom_utilisateur"
>               exit 1
>       elif  grep -q "$1" /etc/passwd; then
>               echo "Utilisateur existe"
>       else echo "utilisateur n'existe pas"
>       fi
Ici, l'option "-z" permet de tester si la chaine passée est vide, et "Grep -q" permet de ne pas afficher les résultats sur la sortie standard.

## Ex5- Factorielle

>#!/bin/bash
>
>nb=1
>
>       for i in $(seq $1); do
>        nb=$(("$nb"*"$i"))
>       done
>echo $nb



## ex6- Le juste prix

>#!/bin/bash
>
>Resultat=$(( 1+ $RANDOM %1000 ))
>
>echo $Resultat
>
>       while [ "$val" != "$Resultat" ]
>       do
>               read -p 'Saisir une valeur :' val
>               if [ $val -lt $Resultat ];then
>                       echo "C'est plus !"
>                fi
>               if [ $val -gt $Resultat ];then
>                       echo "C'est moins !"
>               fi
>               if [ $val -eq $Resultat ];then
>                       echo "C'est gagné !"
>               fi
>       done

## Ex7- Statistiques

#### 7.1- Affiche min, max et moyenne de 3 nombres passés en paramètres

>#!/bin/bash
>
>       function is_number()
>       {
>        re='^[+-]?[0-9]+([.][0-9]+)?$'
>
>        if ! [[ $1 =~ $re ]]; then
>                return 1
>        else
>                return 0
>        fi
>       }
>
>min=200
>
>max=-200
>
>       for i in "$@"; do
>               is_number $i
>               if [ $? -eq 0 ];then
>                       echo "nombre réel"
>               else
>                       echo "Erreur: Nombre non réel"
>               fi
>               if [ $i<-100 || $i > 100 ];then
>                       echo "nombre non compris entre -100 et 100"
>               if [ "$min" -gt "$i" ];then
>                       min="$i"
>               fi
>               if [ "$max" -lt "$i" ]; then
>                       max="$i"
>               fi
>       done
>
>moy=$(( ("$1"+"$2"+"$3") /3 ))
>
>echo "min=$min, max=$max, moy=$moy"

#### 7.2-Pour un nombre quelconque de paramètres

>#!/bin/bash
>
>       function is_number()
>       {
>               re='^[+-]?[0-9]+([.][0-9]+)?$'
>               if ! [[ $1 =~ $re ]]; then
>                      return 1
>               else
>                       return 0
>               fi
>       }
>min=200
>
>max=-200
>
>moy=0
>
>nb=0
>
>       for i in "$@"; do
>               is_number $i
>               if [ $? -eq 0 ];then
>                       echo "nombre réel"
>               else
>                       echo "Erreur: Nombre non réel"
>               fi
>               if [ $i<-100 || $i > 100 ];then
>                       echo "nombre non compris entre -100 et 100"
>               fi
>               if [ "$min" -gt "$i" ];then
>                       min="$i"
>               fi
>               if [ "$max" -lt "$i" ]; then
>                       max="$i"
>               fi
>       done
>
>       while (("\$#")); do
>               moy=$(( "$moy"+"$1" ))
>               shift
>               nb=$[$nb +1]
>       done
>moy=$(( "$moy"/"$nb" ))
>
>echo "min=$min, max=$max, moy=$moy"

#### 7.3-Variables stockées au fur et à mesure dans un tableau

>#!/bin/bash
>
>       function is_number()
>       {
>               re='^[+-]?[0-9]+([.][0-9]+)?$'
>               if ! [[ $1 =~ $re ]]; then
>                       return 1
>               else
>                       return 0
>               fi
>       }
>
>min=200
>
>max=-200
>
>moy=0
>
>nb=0
>
>read -p "Entrez les valeurs: " -a Table
>
>       for i in "${tab[@]}"; do
>               is_number $i
>               if [ $? -eq 0 ];then
>                       echo "nombre réel"
>               else
>                       echo "Erreur: Nombre non réel"
>               fi
>               if [ $i<-100 || $i > 100 ];then
>                       echo "nombre non compris entre -100 et 100"
>               fi
>               if [ "$min" -gt "$i" ];then
>                       min="$i"
>               fi
>               if [ "$max" -lt "$i" ]; then
>                       max="$i"
>               fi
>       done
>
>
>     while (("\$#")); do
>        moy=$(( "$moy"+"$1" ))
>        shift
>        nb=$[$nb +1]
>     done
>moy=$(( "$moy"/"$nb" ))
>
>echo "min=$min, max=$max, moy=$moy"

